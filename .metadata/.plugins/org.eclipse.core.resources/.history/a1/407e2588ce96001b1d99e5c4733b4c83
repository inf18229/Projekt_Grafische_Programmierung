package myCar;
import resources.CarMessages;
import resources.velocity;
import resources.kmh;
import resources.m;
import resources.DriverMessages;
import SystemLib.Math.MathLib;

static class Driver
reads CarMessages.v, CarMessages.x, CarMessages.y
writes CarMessages.power, CarMessages.brake, DriverMessages.emergency, DriverMessages.v_target, DriverMessages.laneChange_right, DriverMessages.laneChange_left {
	characteristic velocity v_target = 30.0[kmh];
	Obstacles Obstacles_instance;
	m distance_next_Obstacle;
	Driver_Tempo Driver_Tempo_instance;
	m min_dist_to_obstacle;
	characteristic boolean Lane_Change_right = false;
	characteristic boolean Lane_Change_left = false;
	MathLib MathLib_instance;
	m real_distance_to_next_obst;
	calcDistance calcDistance_instance;
	@thread
	@generated("blockdiagram", "e14c3b90")
	public void calc() {
		distance_next_Obstacle = Obstacles_instance.distance(CarMessages.x, v_target); // Main/calc 1
		if (distance_next_Obstacle < min_dist_to_obstacle) {
			DriverMessages.emergency = true; // Main/calc 2/if-then 1
		} else {
			DriverMessages.emergency = false; // Main/calc 2/if-else 1
		} // Main/calc 2
		Driver_Tempo_instance.calc(CarMessages.v, v_target); // Main/calc 3
		CarMessages.brake = Driver_Tempo_instance.brake_out; // Main/calc 4
		CarMessages.power = Driver_Tempo_instance.power_out; // Main/calc 5
		DriverMessages.v_target = v_target; // Main/calc 6
		DriverMessages.laneChange_right = Lane_Change_right; // Main/calc 7
		DriverMessages.laneChange_left = Lane_Change_left; // Main/calc 8
		min_dist_to_obstacle = Obstacles_instance.min_dist_to_obst; // Main/calc 9
		real_distance_to_next_obst = calcDistance_instance.calc(Obstacles_instance.distance(CarMessages.x, v_target), CarMessages.y); // Main/calc 10
	}
}