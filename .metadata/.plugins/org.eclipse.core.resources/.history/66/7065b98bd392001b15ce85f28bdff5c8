package myCar;
import resources.CarMessages;
import resources.velocity;
import resources.kmh;
import resources.m;
import resources.DriverMessages;
import resources.curve_max_count;
import resources.s;

static class Driver
reads CarMessages.v, CarMessages.x
writes CarMessages.power, CarMessages.brake, DriverMessages.emergency, DriverMessages.v_target {
	characteristic real power = 30.0;
	characteristic velocity v_target = 30.0[kmh];
	Obstacles Obstacles_instance;
	m distance_next_Obstacle;
	characteristic m min_dist_to_obst = 100.0[m];
	Driver_Tempo Driver_Tempo_instance;
	characteristic real c = 0.0;
	curve_max_count max_count_line[12] = {{5.0[kmh], 10.0[kmh], 15.0[kmh], 20.0[kmh], 25.0[kmh], 30.0[kmh], 35.0[kmh], 40.0[kmh], 45.0[kmh], 50.0[kmh], 55.0[kmh], 60.0[kmh]}, {706.0, 419.0, 236.0, 177.0, 149.0, 128.0, 116.0, 105.0, 97.0, 90.0, 84.0, 80.0}};
	@thread
	@generated("blockdiagram", "2bd5160b")
	public void calc() {
		distance_next_Obstacle = Obstacles_instance.distance(CarMessages.x); // Main/calc 1
		if (distance_next_Obstacle < ((max_count_line.getAt(v_target) * (((CarMessages.v / 3.6) * 4.0) * 1.1)) * 0.01[s])) {
			DriverMessages.emergency = true; // Main/calc 2/if-then 1
		} else {
			DriverMessages.emergency = false; // Main/calc 2/if-else 1
		} // Main/calc 2
		Driver_Tempo_instance.calc(CarMessages.v, v_target); // Main/calc 3
		CarMessages.brake = Driver_Tempo_instance.brake_out; // Main/calc 4
		CarMessages.power = Driver_Tempo_instance.power_out; // Main/calc 5
		DriverMessages.v_target = v_target; // Main/calc 6
	}
}